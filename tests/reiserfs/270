#! /bin/bash
# FSQA Test No. 270
#
# Run fsstress and ENSPC hitters in parallel, check quota and 
# fs consistency an the end
#
#-----------------------------------------------------------------------
# Copyright (c) 2006 Silicon Graphics, Inc.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "rm -f $tmp.*; exit \$status" 0 1 2 3 15

# get standard environment, filters and checks
. ./common/rc
. ./common/filter
. ./common/quota

# Disable all sync operations to get higher load
FSSTRESS_AVOID="$FSSTRESS_AVOID -ffsync=0 -fsync=0 -ffdatasync=0"
_workout()
{
	echo ""
	echo "Run fsstress"
	echo ""
	num_iterations=10
	enospc_time=2
	out=$SCRATCH_MNT/fsstress.$$
	args=`_scale_fsstress_args -p128 -n999999999 -f setattr=1 $FSSTRESS_AVOID -d $out`
	echo "fsstress $args" >> $seqres.full
	# Grant chown capability 
	cp $FSSTRESS_PROG  $tmp.fsstress.bin
	if [ "`whereis setcap`" == "setcap:" ]; then
            _notrun "setcap not installed."
	fi
	setcap cap_chown=epi  $tmp.fsstress.bin

	(su $qa_user -c "$tmp.fsstress.bin $args" &) > /dev/null 2>&1
	pid=$!

	echo "Run dd writers in parallel"
	for ((i=0; i < num_iterations; i++))
	do
		# File will be opened with O_TRUNC each time
		su $qa_user -c "dd if=/dev/zero \
			of=$SCRATCH_MNT/SPACE_CONSUMER bs=1M " \
			>> $seqres.full 2>&1
		sleep $enospc_time
	done

	killall $tmp.fsstress.bin
	wait $pid
}

# real QA test starts here
_supported_fs generic
_supported_os Linux
_require_quota
_require_user
_need_to_be_root
_require_scratch

_scratch_mkfs_sized $((512 * 1024 * 1024)) >> $seqres.full 2>&1
_scratch_mount "-o usrquota,grpquota"
chmod 777 $SCRATCH_MNT
quotacheck -u -g $SCRATCH_MNT 2>/dev/null
quotaon -u -g $SCRATCH_MNT 2>/dev/null

if ! _workout; then
	_scratch_unmount 2>/dev/null
	exit
fi

if ! _check_quota_usage; then
	_scratch_unmount 2>/dev/null
	status=1
	exit
fi

echo Comparing filesystem consistency
if ! _scratch_unmount; then
	echo "failed to umount"
	status=1
	exit
fi
_check_scratch_fs
status=$?
exit
